{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { projectStorage, projectFirestore, timeStamp } from '../firebase';\nimport { useEffect } from 'react';\n\nconst uploadData = async data => {\n  console.log(\"uploding aadhar data\");\n  return new Promise((resolve, reject) => {\n    const collectionRef = projectFirestore.collection('adharCardData');\n    var ref = collectionRef.add({ ...data,\n      \"createdAt\": timeStamp()\n    });\n    ref.then(ref => {\n      console.log(\"ref:\", ref);\n      resolve(ref);\n    });\n  });\n};\n\nconst uploadPhoto = async (image, refId, fileType) => {\n  _s();\n\n  console.log(\"in upload image\");\n  console.log(\"image \", image);\n  useEffect(() => {\n    return new Promise((resolve, reject) => {\n      if (image) {\n        // filePhoto.name =\"abcxyz\"\n        const storageRef = projectStorage.ref(image.name);\n        const collectionRef = projectFirestore.collection('adharCardData');\n        storageRef.put(image).on('state_changed', snap => {// let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n          // setProgress(percentage);\n          // console.log(\"percentage\");\n        }, err => {\n          console.log(\"err: \", err);\n        }, async () => {\n          const url = await storageRef.getDownloadURL(); // const createdAt = timeStamp();\n          // await collectionRef.add({ url, createdAt });\n          //find by id and update url\n\n          await collectionRef.doc(refId).update({\n            [fileType]: url\n          }).then(() => {\n            console.log(fileType, \" uploaded to firebase\");\n            resolve(\"uploaded\");\n          }); // setUrl(url);\n        }); // console.log(\"image uploaded made\");\n      } else console.log(\"if khotu paidu\");\n    });\n  }, [image]);\n};\n\n_s(uploadPhoto, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport { uploadData, uploadPhoto };","map":{"version":3,"sources":["G:/naiti/react/formEasy/form-easy-frontend/src/firebase/addData.js"],"names":["projectStorage","projectFirestore","timeStamp","useEffect","uploadData","data","console","log","Promise","resolve","reject","collectionRef","collection","ref","add","then","uploadPhoto","image","refId","fileType","storageRef","name","put","on","snap","err","url","getDownloadURL","doc","update"],"mappings":";;AAAA,SAASA,cAAT,EAAyBC,gBAAzB,EAA2CC,SAA3C,QAA4D,aAA5D;AACA,SAAQC,SAAR,QAAwB,OAAxB;;AAEA,MAAMC,UAAU,GAAG,MAAOC,IAAP,IAAgB;AAE/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAGpC,UAAMC,aAAa,GAAGV,gBAAgB,CAACW,UAAjB,CAA4B,eAA5B,CAAtB;AACA,QAAIC,GAAG,GAAGF,aAAa,CAACG,GAAd,CAAkB,EAAE,GAAGT,IAAL;AAAW,mBAAaH,SAAS;AAAjC,KAAlB,CAAV;AACAW,IAAAA,GAAG,CAACE,IAAJ,CAAUF,GAAD,IAAS;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBM,GAApB;AACAJ,MAAAA,OAAO,CAACI,GAAD,CAAP;AACH,KAHD;AAKH,GAVM,CAAP;AAaH,CAjBD;;AAqBA,MAAMG,WAAW,GAAG,OAAOC,KAAP,EAAcC,KAAd,EAAqBC,QAArB,KAAkC;AAAA;;AAClDb,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBU,KAArB;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIO,KAAJ,EAAW;AACP;AACA,cAAMG,UAAU,GAAGpB,cAAc,CAACa,GAAf,CAAmBI,KAAK,CAACI,IAAzB,CAAnB;AACA,cAAMV,aAAa,GAAGV,gBAAgB,CAACW,UAAjB,CAA4B,eAA5B,CAAtB;AAEAQ,QAAAA,UAAU,CAACE,GAAX,CAAeL,KAAf,EAAsBM,EAAtB,CAAyB,eAAzB,EAA2CC,IAAD,IAAU,CAChD;AACA;AACA;AACH,SAJD,EAIIC,GAAD,IAAS;AACRnB,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBkB,GAArB;AACH,SAND,EAMG,YAAY;AACX,gBAAMC,GAAG,GAAG,MAAMN,UAAU,CAACO,cAAX,EAAlB,CADW,CAEX;AACA;AAEA;;AAEA,gBAAMhB,aAAa,CAACiB,GAAd,CAAkBV,KAAlB,EAAyBW,MAAzB,CAAgC;AAClC,aAACV,QAAD,GAAYO;AADsB,WAAhC,EAEHX,IAFG,CAEE,MAAM;AACVT,YAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ,EAAsB,uBAAtB;AACAV,YAAAA,OAAO,CAAC,UAAD,CAAP;AACH,WALK,CAAN,CAPW,CAcX;AAGH,SAvBD,EALO,CA6BP;AACH,OA9BD,MAgCIH,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACP,KAlCM,CAAP;AAoCH,GArCQ,EAqCN,CAACU,KAAD,CArCM,CAAT;AAuCH,CA1CD;;GAAMD,W;;AA4CN,SAASZ,UAAT,EAAqBY,WAArB","sourcesContent":["import { projectStorage, projectFirestore, timeStamp } from '../firebase';\r\nimport {useEffect} from 'react';\r\n\r\nconst uploadData = async (data) => {\r\n\r\n    console.log(\"uploding aadhar data\");\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n\r\n        const collectionRef = projectFirestore.collection('adharCardData');\r\n        var ref = collectionRef.add({ ...data, \"createdAt\": timeStamp() })\r\n        ref.then((ref) => {\r\n            console.log(\"ref:\", ref);\r\n            resolve(ref)\r\n        })\r\n\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst uploadPhoto = async (image, refId, fileType) => {\r\n    console.log(\"in upload image\");\r\n    console.log(\"image \",image);\r\n    useEffect(() => {\r\n        return new Promise((resolve, reject) => {\r\n            if (image) {\r\n                // filePhoto.name =\"abcxyz\"\r\n                const storageRef = projectStorage.ref(image.name);\r\n                const collectionRef = projectFirestore.collection('adharCardData');\r\n    \r\n                storageRef.put(image).on('state_changed', (snap) => {\r\n                    // let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n                    // setProgress(percentage);\r\n                    // console.log(\"percentage\");\r\n                }, (err) => {\r\n                    console.log(\"err: \", err);\r\n                }, async () => {\r\n                    const url = await storageRef.getDownloadURL();\r\n                    // const createdAt = timeStamp();\r\n                    // await collectionRef.add({ url, createdAt });\r\n    \r\n                    //find by id and update url\r\n    \r\n                    await collectionRef.doc(refId).update({\r\n                        [fileType]: url\r\n                    }).then(() => {\r\n                        console.log(fileType, \" uploaded to firebase\");\r\n                        resolve(\"uploaded\")\r\n                    });\r\n    \r\n                    // setUrl(url);\r\n    \r\n    \r\n                });\r\n                // console.log(\"image uploaded made\");\r\n            }\r\n            else\r\n                console.log(\"if khotu paidu\");\r\n        })\r\n        \r\n    }, [image])\r\n    \r\n}\r\n\r\nexport { uploadData, uploadPhoto };"]},"metadata":{},"sourceType":"module"}